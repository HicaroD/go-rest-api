#!/bin/python3

import json
import argparse
import os
from pathlib import Path
from datetime import datetime

DEFAULT_ERRORS_DIR = "server"
DEFAULT_README_OUTPUT = "docs/ERRORS.md"

TEMPLATE_GO = """// Code generated by error generator script; DO NOT EDIT.
// Generated at {timestamp}
package server


import (
    "github.com/labstack/echo/v4"
)


type HTTPError struct {{
    Code       string `json:"code"`
    Message    string `json:"message"`
    HTTPStatus int    `json:"-"`
}}


func NewHTTPError(code string, message string, status int) *HTTPError {{
    return &HTTPError{{
        Code:       code,
        Message:    message,
        HTTPStatus: status,
    }}
}}

func (e HTTPError) Error() string {{
    return e.Code
}}

// WARNING: Don't forget to insert this middleware in the Echo framework
func CustomHTTPErrorHandler() echo.MiddlewareFunc {{
    return func(next echo.HandlerFunc) echo.HandlerFunc {{
        return func(c echo.Context) error {{
            err := next(c)
            if err == nil {{
                return nil
            }}

            if httpError, ok := err.(*HTTPError); ok {{
                return c.JSON(httpError.HTTPStatus, httpError)
            }}

            // Handle other error types
            return err
        }}
    }}
}}

{error_functions}
"""


FUNCTION_TEMPLATE = """
// {func_name} creates a new HTTPError for {code}
func {func_name}() *HTTPError {{
    return NewHTTPError("{code}", "{message}", {status})
}}
"""


README_TEMPLATE = """# API Error Codes

Document generated by error generator script; DO NOT EDIT.
Last generated at {timestamp}

| HTTP Status | Error Code       | Message                          |
|-------------|------------------|----------------------------------|
{rows}
"""


def generate_go_code(errors, errors_dir):
    functions = []
    errors_path = Path(os.path.join(errors_dir, "errors.go"))

    for error in errors:
        functions.append(FUNCTION_TEMPLATE.format(
            func_name=f"{error['name']}Err",
            code=error['code'],
            message=error['message'],
            status=error['status']
        ))

    service_errors = TEMPLATE_GO.format(
        timestamp=datetime.now().isoformat(),
        error_functions="\n".join(functions)
    )

    errors_path.parent.mkdir(parents=True, exist_ok=True)
    errors_path.write_text(service_errors)
    print(f"Generated Go code at {errors_path}")


def generate_readme(errors, readme_file_path):
    rows = []
    for error in errors:
        row = f"| {error['status']} | `{error['code']}` | {error['message']} |"
        rows.append(row)
    
    readme_file = README_TEMPLATE.format(
        timestamp=datetime.now().isoformat(),
        rows="\n".join(rows)
    )

    readme_output = Path(readme_file_path)
    readme_output.parent.mkdir(parents=True, exist_ok=True)
    readme_output.write_text(readme_file)
    print(f"Generated documentation at {readme_output.absolute()}")


def main():
    parser = argparse.ArgumentParser(
        description="Generate Go error handling code and documentation from JSON definitions",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    
    parser.add_argument(
        "-i", "--input",
        default="errors.json",
        help="Path to JSON input file with error definitions"
    )

    parser.add_argument(
        "-d", "--dir",
        default=DEFAULT_ERRORS_DIR,
        help="Path to save 'errors.go' file"
    )

    parser.add_argument(
        "-r", "--readme-output",
        default=DEFAULT_README_OUTPUT,
        help="Output path for generated documentation"
    )
    
    args = parser.parse_args()

    input_path = Path(args.input)
    if not input_path.exists():
        print(f"Error: Input file {input_path} does not exist")
        return

    try:
        with open(input_path) as f:
            errors = json.load(f)
    except json.JSONDecodeError as e:
        print(f"Error parsing JSON file: {e}")
        return

    generate_go_code(errors, args.dir)
    generate_readme(errors, args.readme_output)


if __name__ == "__main__":
    main()
